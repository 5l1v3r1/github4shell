global
    #log /dev/log    local0
    #log /dev/log    local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    #ca-base /etc/ssl/certs
    #crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3
    tune.ssl.default-dh-param  1024

defaults
    log    global
    mode    http
    option    httplog
    option    dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend weblb   
    bind *:80
    mode http

    option forceclose
    #option httpclose
    log global
    redirect scheme https if !{ ssl_fc }

frontend web_https
    bind *:443 ssl crt /etc/haproxy/check_mk.pem ciphers HIGH:!aNULL:!MD5
    mode http

    log global
    #解决url带中文IE返回400错误
    option accept-invalid-http-request

    #使后端server获取到客户端的真实IP
    option forwardfor

    http-request add-header X-Forwarded-Host %[req.hdr(host)]
    http-request add-header X-Forwarded-Server %[req.hdr(host)]
    http-request add-header X-Forwarded-Port %[dst_port]

    #gzip on
    compression algo gzip
    compression type text/css text/javascript application/javascript text/plain text/xml application/json

    #deny bad robot
    #acl badbots hdr_reg(User-Agent) -i -f /etc/haproxy/badbots.lst

    #block if badbots
    #http-request deny if badbots
    
    acl url_graylog hdr_beg(host) -i graylog.ab.cn
    acl url_mk hdr_beg(host) -i mk.ab.cn
    acl url_graylog_doc hdr_beg(host) -i graylog-doc.ab.cn
    acl url_grafana hdr_beg(host) -i grafana.ab.cn
    acl url_mon     path_beg    -i /mon
    acl url_jolokia       path_beg       -i /jolokia

    #block if url_jolokia
    http-request deny if url_jolokia

    redirect location /mon if !url_mon url_mk
    use_backend graylog_9000 if url_graylog
    use_backend grafana_3000 if url_grafana
    use_backend check_mk_5000    if url_mk
    use_backend graylog_html_8000    if url_graylog_doc

backend check_mk_5000
    balance     roundrobin
    server      mk 127.0.0.1:5000 check

backend graylog_9000
    description     The Graylog Web backend.
    balance roundrobin
    option httpchk HEAD /api/system/lbstatus
    http-request set-header X-Graylog-Server-URL https://graylog.ab.cn/
    server graylog1 192.168.1.235:9000 maxconn 20 check
    server graylog2 192.168.1.237:9000 maxconn 20 check
    server graylog3 192.168.1.240:9000 maxconn 20 check

backend graylog_html_8000
    acl too_fast be_sess_rate gt 10
    acl too_many be_conn gt 10
    tcp-request inspect-delay 3s
    tcp-request content accept if ! too_fast or ! too_many
    tcp-request content accept if WAIT_END
    balance     roundrobin
    server      graylog_html 127.0.0.1:8000 check maxconn 300
