#
# This is an example VCL file for Varnish.
#
# It does not do anything by default, delegating control to the
# builtin VCL. The builtin VCL is called when there is no explicit
# return statement.
#
# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
# and http://varnish-cache.org/trac/wiki/VCLExamples for more examples.

# Marker to tell the VCL compiler that this VCL has been adapted to the
# new 4.0 format.
vcl 4.0;
import directors;

probe backend_healthcheck_content { # 创建健康监测
#    .url = "/static-content/check_varnish/varnish.html";
    .request =
      "HEAD /static-content/check_varnish/varnish.html HTTP/1.1"
      "Host: localhost"
      "Connection: close"
      "User-Agent: Varnish Health Probe";
    .window = 5;
    .threshold = 2;
    .interval = 3s;
}

probe backend_healthcheck_static { # 创建健康监测
#    .url = "/static/html/Login.html";
    .request =
      "HEAD /static/html/Login.html HTTP/1.1"
      "Host: localhost"
      "Connection: close"
      "User-Agent: Varnish Health Probe";
    .window = 5;
    .threshold = 2;
    .interval = 3s;
}

# Default backend definition. Set this to point to your content server.
backend url_static_132 {
    .host = "10.21.1.132";
    .port = "51001";
    .probe = backend_healthcheck_content;
}

backend url_static_133 {
    .host = "10.21.1.133";
    .port = "51001";
    .probe = backend_healthcheck_content;
}

backend url_css_132 {
    .host = "10.21.1.132";
    .port = "51002";
    .probe = backend_healthcheck_static;
}

backend url_css_133 {
    .host = "10.21.1.133";
    .port = "51002";
    .probe = backend_healthcheck_static;
}

# 创建后端主机组，即directors
sub vcl_init {    
    new static_cluster = directors.round_robin();
    static_cluster.add_backend(url_static_132);
    static_cluster.add_backend(url_static_133);
    new css_cluster = directors.round_robin();
    css_cluster.add_backend(url_css_132);
    css_cluster.add_backend(url_css_133);
}

sub vcl_recv {
    # Happens before we check if we have this in cache already.
    #
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.
    #set req.http.X-Forwarded-For = req.http.X-Forwarded-For + server.ip;
    if (req.url ~ "^/static-content/") {
        #set req.backend_hint = default;
        set req.backend_hint = static_cluster.backend();
    } elsif (req.url ~ "^/static/") {
        #set req.backend_hint = static_51002;
        set req.backend_hint = css_cluster.backend();
    }
}

sub vcl_backend_response {
    # Happens after we have read the response headers from the backend.
    #
    # Here you clean the response headers, removing silly Set-Cookie headers
    # and other mistakes your backend does.
}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.

    unset resp.http.Via;
    ##　//varnish 默认显示版本信息
    unset resp.http.X-Varnish;
    ##  //varnish 默认
    set resp.http.Server="no-server";
    ##　//后端服务器版本信息，如：Apache/2.4.4 (Win64)
}
